@(actions: List[com.barrysims.qbf.model.Action])/* Autogenerated */
@import com.barrysims.qbf.model._

DefaultAction empty = DefaultAction(0);
SwapCtrlSuperAction c_s = SwapCtrlSuperAction();

@for(action <- actions) {
@action match {
case (a: HoldAndReleaseAction) => {HoldAndReleaseAction @{a.name} = HoldAndReleaseAction(&@{a.holdAction}, &@{a.releaseAction}, 400, @{a.buffered});}
case (a: LayerAction) => {LayerAction @{a.name} = LayerAction(@{a.layer});}
case (a: MacroAction) => {Action * @{a.name}_macro[@{a.keys.size}] = {@{a.keys.map("&" + _).mkString(", ")}};
MacroAction @{a.name} = MacroAction(@{a.name}_macro, @{a.keys.size}, @{a.clear});}
case (a: ModifierAction) => {ModifierAction @{a.name} = ModifierAction(@{a.value});}
case (a: DefaultAction) => {DefaultAction @{a.name} = DefaultAction(@{a.value});}
case (a: DelayAction) => {DelayAction @{a.name} = DelayAction(@{a.time});}
case (a: StringAction) => {StringAction @{a.name} = StringAction("@{a.value}", @{a.value.length});}
case (a: ShiftAction) => {ShiftAction @{a.name} = ShiftAction(&@{a.action}, &@{a.shiftAction});}
case (a: ToggleAction) => {ToggleAction @{a.name} = ToggleAction(&@{a.action});}
case (a: ClickAction) => {ClickAction @{a.name} = ClickAction(@{a.button});}
}}
