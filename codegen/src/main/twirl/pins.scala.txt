@(pins: com.barrysims.qbf.model.Pins)
/* Autogenerated */
@import com.barrysims.qbf.model.Pin
@import com.barrysims.qbf.model.TeensyPin
@import com.barrysims.qbf.model.ExpanderPin
@import com.barrysims.qbf.model.KillPin

@cols = @{pins.pins.collect{case p if p.axis == "col" => p}}
@rows = @{pins.pins.collect{case p if p.axis == "row" => p}}

@expanderPins = @{pins.pins.collect{case e: ExpanderPin => e}}
@teensyPins = @{pins.pins.collect{case t: TeensyPin => t}}
@kill_pin = @{pins.pins.collectFirst{case k: KillPin => k}.get}

@* Imports *@
#import "Adafruit_MCP23017.h"
#import "Pin.h"
#import "ExpanderPin.h"
#import "TeensyPin.h"

@* Define Statements *@
#define cols @cols.size
#define rows @rows.size

#define ROW 0
#define COL 1

#define onLevel @if(pins.activeMode == "INPUT_PULLUP") {0} else {1}
#define offLevel @if(pins.activeMode == "INPUT_PULLUP") {1} else {0}

#define kill_pin @kill_pin.number

const int inputAxis = @pins.inputAxis;

Adafruit_MCP23017 pins0;
Adafruit_MCP23017 pins1;

@for(pin <- expanderPins) {
ExpanderPin @(pin.name) = ExpanderPin(@(pin.number), &pins@(pin.chip));}

@for(pin <- teensyPins) {
TeensyPin @(pin.name) = TeensyPin(@(pin.number));}

@* Initialise Statements *@
void pins() {

    pins0.begin();
    pins1.begin(1);

@for(pin <- expanderPins) {
    pins@(pin.chip).pinMode(@pin.number, @if(pins.inputAxis == pin.axis.toUpperCase) {INPUT} else {OUTPUT});}

@if(pins.activeMode == "INPUT_PULLUP") {
@for(pin <- expanderPins if pins.inputAxis == pin.axis.toUpperCase) {
    pins@(pin.chip).pullUp(@pin.number, HIGH);}
@for(pin <- teensyPins if pins.inputAxis == pin.axis.toUpperCase) {
    pinMode(@pin.number, INPUT_PULLUP);}
@for(pin <- teensyPins if pins.inputAxis != pin.axis.toUpperCase) {
    pinMode(@pin.number, OUTPUT);}}
    pinMode(@kill_pin.number, INPUT_PULLUP);
@if(pins.activeMode == "INPUT") {
@for(pin <- teensyPins if pins.inputAxis == pin.axis.toUpperCase) {
    pinMode(@pin.number, INPUT);}}
}

@* Array Statements *@
Pin * row[@(rows.size)] = {@for(pin <- rows) {
    &@pin.name,}
};

Pin * col[@(cols.size)] = {@for(pin <- cols) {
    &@pin.name,}
};